import Head from "next/head";
import { useState, useEffect } from "react";
import styles from "../styles/Home.module.css";
import { ethers } from "ethers";
import { abi, contractAddress } from "../public/const";

export default function Home() {
  const [supply, setSupply] = useState("Loading...");
  const [name, setName] = useState("Loading...");
  const [symbol, setSymbol] = useState("Loading...");
  const [owners, setOwners] = useState([]);
  const [amount, setAmount] = useState(0);
  const [receiver, setReciever] = useState("Please enter reciever's address");
  const [refresher, setRefresher] = useState(false);

  useEffect(() => {
    console.log("Loading ...");
    let provider = ethers.getDefaultProvider("goerli");
    // We connect to the Contract using a Provider, so we will only
    // have read-only access to the Contract
    let contract = new ethers.Contract(contractAddress, abi, provider);
    console.log("contract is", contract);
    const fetchInfo = async () => {
      let tokenSupply = await contract.totalSupply();
      tokenSupply = parseInt(tokenSupply._hex, 16);
      let tokenName = await contract.name();
      let tokenSymbol = await contract.symbol();
      let tokenOwners = await contract.getOwners();

      let _owners = new Array(tokenOwners.length);
      for (let i = 0; i < tokenOwners.length; i++) {
        let balance = await contract.balanceOf(tokenOwners[i]);
        _owners[i] = new Array(2);
        _owners[i][0] = tokenOwners[i];
        _owners[i][1] = parseInt(balance._hex, 16);
      }

      if (tokenSupply !== supply) {
        setSupply(tokenSupply);
      }
      if (tokenName !== name) {
        setName(tokenName);
      }
      if (tokenSupply !== symbol) {
        setSymbol(tokenSymbol);
      }
      if (JSON.stringify(_owners) != JSON.stringify(owners)) {
        setOwners(_owners);
      }
    };
    fetchInfo();
  }, [name, owners, supply, symbol, refresher]);
  function handleAmountChange(event) {
    setAmount(event.target.value);
  }
  function handleReceiverChange(event) {
    setReciever(event.target.value);
  }
  async function tokenTransfer() {
    const provider = new ethers.providers.Web3Provider(
      window.ethereum,
      "goerli"
    );
    await provider.send("eth_requestAccounts", []);
    const signer = provider.getSigner();
    let contract = new ethers.Contract(contractAddress, abi, signer);
    await contract.transfer(receiver, amount);
    setRefresher(!refresher);
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>ERC-20</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Token Info</h1>
      <div>Total Supply: {supply}</div>
      <div>Name: {name}</div>
      <div>Symbol: {symbol}</div>
      <h1>Transfer</h1>
      <div>
        <label>Amount:</label> <br></br>
        <input type="text" value={amount} onChange={handleAmountChange} />{" "}
        <br></br>
        <label>Reciever:</label> <br></br>
        <input
          type="text"
          value={receiver}
          onChange={handleReceiverChange}
        />{" "}
        <br></br>
        <button type="submit" className={styles.button} onClick={tokenTransfer}>
          Transfer
        </button>
      </div>
      <h1>Owners</h1>
      <div>
        {owners.map((item, i) => {
          return (
            <ul key={i} value={item}>
              {item[0]} has {item[1]} {symbol} tokens
            </ul>
          );
        })}
      </div>
    </div>
  );
}
